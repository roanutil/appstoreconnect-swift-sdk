// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1 {
	public var appPricePoints: AppPricePoints {
		AppPricePoints(path: path + "/appPricePoints")
	}

	public struct AppPricePoints {
		/// Path: `/v1/appPricePoints`
		public let path: String

		@available(*, deprecated, message: "Deprecated")
		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.AppPricePointsResponse> {
			Request(method: "GET", path: path, query: parameters?.asQuery, id: "appPricePoints-get_collection")
		}

		public struct GetParameters {
			public var filterPriceTier: [String]?
			public var filterTerritory: [String]?
			public var fieldsAppPricePoints: [FieldsAppPricePoints]?
			public var limit: Int?
			public var include: [Include]?
			public var fieldsTerritories: [FieldsTerritories]?

			public enum FieldsAppPricePoints: String, Codable, CaseIterable, Hashable, Sendable {
				case customerPrice
				case priceTier
				case proceeds
				case territory
			}

			public enum Include: String, Codable, CaseIterable, Hashable, Sendable {
				case priceTier
				case territory
			}

			public enum FieldsTerritories: String, Codable, CaseIterable, Hashable, Sendable {
				case currency
			}

			public init(filterPriceTier: [String]? = nil, filterTerritory: [String]? = nil, fieldsAppPricePoints: [FieldsAppPricePoints]? = nil, limit: Int? = nil, include: [Include]? = nil, fieldsTerritories: [FieldsTerritories]? = nil) {
				self.filterPriceTier = filterPriceTier
				self.filterTerritory = filterTerritory
				self.fieldsAppPricePoints = fieldsAppPricePoints
				self.limit = limit
				self.include = include
				self.fieldsTerritories = fieldsTerritories
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterPriceTier, forKey: "filter[priceTier]")
				encoder.encode(filterTerritory, forKey: "filter[territory]")
				encoder.encode(fieldsAppPricePoints, forKey: "fields[appPricePoints]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				encoder.encode(fieldsTerritories, forKey: "fields[territories]")
				return encoder.items
			}
		}
	}
}
