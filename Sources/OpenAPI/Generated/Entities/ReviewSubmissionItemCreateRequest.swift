// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct ReviewSubmissionItemCreateRequest: Codable, Hashable, Sendable {
	public var data: Data

	public struct Data: Codable, Hashable, Sendable {
		public var type: `Type`
		public var relationships: Relationships

		public enum `Type`: String, Codable, CaseIterable, Hashable, Sendable {
			case reviewSubmissionItems
		}

		public struct Relationships: Codable, Hashable, Sendable {
			public var reviewSubmission: ReviewSubmission
			public var appStoreVersion: AppStoreVersion?
			public var appCustomProductPageVersion: AppCustomProductPageVersion?
			public var appStoreVersionExperiment: AppStoreVersionExperiment?
			public var appStoreVersionExperimentV2: AppStoreVersionExperimentV2?
			public var appEvent: AppEvent?

			public struct ReviewSubmission: Codable, Hashable, Sendable {
				public var data: Data

				public struct Data: Codable, Hashable, Identifiable, Sendable {
					public var type: `Type`
					public var id: String

					public enum `Type`: String, Codable, CaseIterable, Hashable, Sendable {
						case reviewSubmissions
					}

					public init(type: `Type`, id: String) {
						self.type = type
						self.id = id
					}
				}

				public init(data: Data) {
					self.data = data
				}
			}

			public struct AppStoreVersion: Codable, Hashable, Sendable {
				public var data: Data?

				public struct Data: Codable, Hashable, Identifiable, Sendable {
					public var type: `Type`
					public var id: String

					public enum `Type`: String, Codable, CaseIterable, Hashable, Sendable {
						case appStoreVersions
					}

					public init(type: `Type`, id: String) {
						self.type = type
						self.id = id
					}
				}

				public init(data: Data? = nil) {
					self.data = data
				}
			}

			public struct AppCustomProductPageVersion: Codable, Hashable, Sendable {
				public var data: Data?

				public struct Data: Codable, Hashable, Identifiable, Sendable {
					public var type: `Type`
					public var id: String

					public enum `Type`: String, Codable, CaseIterable, Hashable, Sendable {
						case appCustomProductPageVersions
					}

					public init(type: `Type`, id: String) {
						self.type = type
						self.id = id
					}
				}

				public init(data: Data? = nil) {
					self.data = data
				}
			}

			public struct AppStoreVersionExperiment: Codable, Hashable, Sendable {
				public var data: Data?

				public struct Data: Codable, Hashable, Identifiable, Sendable {
					public var type: `Type`
					public var id: String

					public enum `Type`: String, Codable, CaseIterable, Hashable, Sendable {
						case appStoreVersionExperiments
					}

					public init(type: `Type`, id: String) {
						self.type = type
						self.id = id
					}
				}

				public init(data: Data? = nil) {
					self.data = data
				}
			}

			public struct AppStoreVersionExperimentV2: Codable, Hashable, Sendable {
				public var data: Data?

				public struct Data: Codable, Hashable, Identifiable, Sendable {
					public var type: `Type`
					public var id: String

					public enum `Type`: String, Codable, CaseIterable, Hashable, Sendable {
						case appStoreVersionExperiments
					}

					public init(type: `Type`, id: String) {
						self.type = type
						self.id = id
					}
				}

				public init(data: Data? = nil) {
					self.data = data
				}
			}

			public struct AppEvent: Codable, Hashable, Sendable {
				public var data: Data?

				public struct Data: Codable, Hashable, Identifiable, Sendable {
					public var type: `Type`
					public var id: String

					public enum `Type`: String, Codable, CaseIterable, Hashable, Sendable {
						case appEvents
					}

					public init(type: `Type`, id: String) {
						self.type = type
						self.id = id
					}
				}

				public init(data: Data? = nil) {
					self.data = data
				}
			}

			public init(reviewSubmission: ReviewSubmission, appStoreVersion: AppStoreVersion? = nil, appCustomProductPageVersion: AppCustomProductPageVersion? = nil, appStoreVersionExperiment: AppStoreVersionExperiment? = nil, appStoreVersionExperimentV2: AppStoreVersionExperimentV2? = nil, appEvent: AppEvent? = nil) {
				self.reviewSubmission = reviewSubmission
				self.appStoreVersion = appStoreVersion
				self.appCustomProductPageVersion = appCustomProductPageVersion
				self.appStoreVersionExperiment = appStoreVersionExperiment
				self.appStoreVersionExperimentV2 = appStoreVersionExperimentV2
				self.appEvent = appEvent
			}
		}

		public init(type: `Type`, relationships: Relationships) {
			self.type = type
			self.relationships = relationships
		}
	}

	public init(data: Data) {
		self.data = data
	}
}
