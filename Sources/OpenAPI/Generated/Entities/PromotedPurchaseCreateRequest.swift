// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct PromotedPurchaseCreateRequest: Codable, Hashable, Sendable {
	public var data: Data

	public struct Data: Codable, Hashable, Sendable {
		public var type: `Type`
		public var attributes: Attributes
		public var relationships: Relationships

		public enum `Type`: String, Codable, CaseIterable, Hashable, Sendable {
			case promotedPurchases
		}

		public struct Attributes: Codable, Hashable, Sendable {
			public var isVisibleForAllUsers: Bool
			public var isEnabled: Bool?

			public init(isVisibleForAllUsers: Bool, isEnabled: Bool? = nil) {
				self.isVisibleForAllUsers = isVisibleForAllUsers
				self.isEnabled = isEnabled
			}

			private enum CodingKeys: String, CodingKey {
				case isVisibleForAllUsers = "visibleForAllUsers"
				case isEnabled = "enabled"
			}
		}

		public struct Relationships: Codable, Hashable, Sendable {
			public var app: App
			public var inAppPurchaseV2: InAppPurchaseV2?
			public var subscription: Subscription?

			public struct App: Codable, Hashable, Sendable {
				public var data: Data

				public struct Data: Codable, Hashable, Identifiable, Sendable {
					public var type: `Type`
					public var id: String

					public enum `Type`: String, Codable, CaseIterable, Hashable, Sendable {
						case apps
					}

					public init(type: `Type`, id: String) {
						self.type = type
						self.id = id
					}
				}

				public init(data: Data) {
					self.data = data
				}
			}

			public struct InAppPurchaseV2: Codable, Hashable, Sendable {
				public var data: Data?

				public struct Data: Codable, Hashable, Identifiable, Sendable {
					public var type: `Type`
					public var id: String

					public enum `Type`: String, Codable, CaseIterable, Hashable, Sendable {
						case inAppPurchases
					}

					public init(type: `Type`, id: String) {
						self.type = type
						self.id = id
					}
				}

				public init(data: Data? = nil) {
					self.data = data
				}
			}

			public struct Subscription: Codable, Hashable, Sendable {
				public var data: Data?

				public struct Data: Codable, Hashable, Identifiable, Sendable {
					public var type: `Type`
					public var id: String

					public enum `Type`: String, Codable, CaseIterable, Hashable, Sendable {
						case subscriptions
					}

					public init(type: `Type`, id: String) {
						self.type = type
						self.id = id
					}
				}

				public init(data: Data? = nil) {
					self.data = data
				}
			}

			public init(app: App, inAppPurchaseV2: InAppPurchaseV2? = nil, subscription: Subscription? = nil) {
				self.app = app
				self.inAppPurchaseV2 = inAppPurchaseV2
				self.subscription = subscription
			}
		}

		public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
			self.type = type
			self.attributes = attributes
			self.relationships = relationships
		}
	}

	public init(data: Data) {
		self.data = data
	}
}
